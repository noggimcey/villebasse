' http://plantuml.sourceforge.net/classes.html

@startuml luokkarakenne.png

package villebasse.gamelogic
	class Board {
		+{static} int defaultNumberOfPieces = 72
		-HashMap<Point, Piece> pieces
		-int maxX
		-int maxY
		-int minX
		-int minY

		+Board(Piece initialPiece)
		+Board(Piece initialPiece, int numberOfPieces)
		+Board(Deck deck)
		+Piece[][] asArray()
		+void putPieceAbsolute(int x, int y, Piece piece)
		+void putPieceAbsolute(int x, int y, Piece piece)
		+int height()
		+int width()
	}

	abstract class Deck {
		#Vector<Piece> pieces

		+Piece draw()
		+boolean isEmpty()
		+boolen putBack(Piece piece)
		+void shuffle()
		+int size()
	}

	class Direction {
		+{static} int NORTH
		+{static} int EAST
		+{static} int SOUTH
		+{static} int WEST

		+Direction()
		+Direction(int direction)
		+boolean equals(Direction that)
		+Iterator<Direction> iterator()
		+Direction next()
		+Direction modulate(Direction direction)
		+int ordinal()
		+Direction opposite()
		+Direction prev()
		+Direction rotateAntiClockWise(int numberOfTimes)
		+Direction rotateClockWise(int numberOfTimes)
		+String toString()
	}

	abstract class Piece {
		#Direction rotation
		#Terrain[] edges

		+Direction getDirection()
		+Terrain edge(Direction direction)
		+Terrain[] edges()
		+void rotate()
		+void rotate(int numberOfTimes)
		+void setRotation(int direction)
		+void setRotation(Direction direction)
		+String toString()
	}


	' relations

	Deck <|-- DefaultDeck
	Deck <|-- DefaultDeckWithoutRoads
	Deck <|-- RiverExpansion

	Piece <|-- PieceBigCity
	Piece <|-- PieceCityCorner
	Piece <|-- PieceCityPipe
	Piece <|-- PieceBigField

	Deck *-- Piece
	Board *-- Piece

	Board ..> Direction: uses
	Piece ..> Direction: uses
end package

package villebasse.ui
	interface UI {
		+boolean initialize(String[] args)
		+void run()
	}

	package villebasse.ui.swing
		class BoardEvent <extends AWTEvent> {
			+int x
			+int y

			+BoardEvent(Object source)
			+BoardEvent(Object source, int type)
			+BoardEvent(Object source, int x, int y)
			+BoardEvent(Object source, int x, int y, int type)
		}

		interface BoardEventListener <extends EventListener> {
			+void boardEventOccurred(BoardEvent be)
		}

		class GUIPiece extends JPanelWithCustomEvents {
			-{static} PieceToImageMapper mapper
			-BufferedImage image
			-Piece piece
			-AffineTransform tx
			-boolean rotateable

			+{static} PieceToImageMapper setMapper(PieceToImageMapper mapper)
			+GUIPiece()
			+GUIPiece(Piece piece)
			+GUIPiece(Piece piece, boolean rotateable)
			+void paint(Graphics g)
			+void rotateAntiClockWise()
			+void rotateClockWise()
		}

		class JPanelWithCustomEvents <extends JPanel> {
			-Vector<BoardEventListener> boardEventListeners

			+void addBoardEventListener(BoardEventListener listener)
			+void dispatchEvent(BoardEvent be)
		}

		abstract class PieceToImageMapper {
			#String baseDirectory
			#String prefix
			#String postfix
			#HashMap<String, Vector<BufferedImage>> images
			#HashMap<Piece, BufferedImage> cache

			+BufferedImage map()
			+BufferedImage map(Piece piece)

			#boolean addImages(String pieceType, String[] files)
			#bufferedImage checkCache(Piece piece)
			#String fullname(String name)
			#BufferedImage openImage(String filename)
			#Vector<BufferedImage> openImages(String filename)
			#BufferedImage randomImage(String name)
			#{static} String pieceClass(Piece piece)
		}

		class NullMapper extends PieceToImageMapper
		class ScannedMapper extends PieceToImageMapper

		' relations

		GUIPiece o-- Piece
		GUIPiece --> PieceToImageMapper

		UISwing ..> BoardEvent
		UISwing ..> BoardEventListener

		UISwing *-- GUIPiece
		UISwing o-- Board
		UISwing o-- Deck
		UISwing o-- Piece

	end package

	UI <|-- UIConsole
	UI <|-- UISwing

end package

@enduml
